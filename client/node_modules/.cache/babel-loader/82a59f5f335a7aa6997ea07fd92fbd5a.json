{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants'; // for when we need a query function for useQuery\n\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments // {\n  // staleTime: 10000,\n  // }\n  );\n  return data;\n}\n\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});\n\nexport function usePrefetchTreatments() {\n  _s2();\n\n  const queryClient = useQueryClient();\n  queryClient.prefetchQuery(queryKeys.treatments, getTreatments // {\n  // cacheTime: 50000,\n  // staleTime: 10000,\n  // }\n  );\n}\n\n_s2(usePrefetchTreatments, \"4R+oYVB2Uc11P7bp1KcuhpkfaTw=\", false, function () {\n  return [useQueryClient];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["useQuery","useQueryClient","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","usePrefetchTreatments","queryClient","prefetchQuery"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B,C,CAEA;;AACA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,aAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEH,IAAAA,IAAI,GAAGG;AAAT,MAAsBR,QAAQ,CAClCG,SAAS,CAACM,UADwB,EAElCL,aAFkC,CAGlC;AACA;AACA;AALkC,GAApC;AAQA,SAAOC,IAAP;AACD;;GAXeE,a;UAEcP,Q;;;AAW9B,OAAO,SAASU,qBAAT,GAAuC;AAAA;;AAC5C,QAAMC,WAAW,GAAGV,cAAc,EAAlC;AAEAU,EAAAA,WAAW,CAACC,aAAZ,CACET,SAAS,CAACM,UADZ,EAEEL,aAFF,CAGE;AACA;AACA;AACA;AANF;AAQD;;IAXeM,qB;UACMT,c","sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const fallback = [];\n  const { data = fallback } = useQuery(\n    queryKeys.treatments,\n    getTreatments,\n    // {\n    // staleTime: 10000,\n    // }\n  );\n\n  return data;\n}\n\nexport function usePrefetchTreatments(): void {\n  const queryClient = useQueryClient();\n\n  queryClient.prefetchQuery(\n    queryKeys.treatments,\n    getTreatments,\n    // {\n    // cacheTime: 50000,\n    // staleTime: 10000,\n    // }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}