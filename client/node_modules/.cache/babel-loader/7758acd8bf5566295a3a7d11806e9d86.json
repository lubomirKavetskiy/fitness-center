{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { filterByTreatment } from '../utils'; // for when we need a query function for useQuery\n\nasync function getStaff() {\n  const {\n    data\n  } = await axiosInstance.get('/staff');\n  return data;\n}\n\nexport function useStaff() {\n  _s();\n\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n  const selectFn = useCallback(data => filterByTreatment(data, filter), [filter]);\n  const fallback = [];\n  const {\n    data: staff = fallback\n  } = useQuery(queryKeys.staff, getStaff, {\n    select: filter === 'all' ? undefined : selectFn\n  });\n  return {\n    staff,\n    filter,\n    setFilter\n  };\n}\n\n_s(useStaff, \"H5iJbTq0KjuiK8q6TAQVwM4BZcE=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/staff/hooks/useStaff.ts"],"names":["useCallback","useState","useQuery","axiosInstance","queryKeys","filterByTreatment","getStaff","data","get","useStaff","filter","setFilter","selectFn","fallback","staff","select","undefined"],"mappings":";;AAAA,SAAmCA,WAAnC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,iBAAT,QAAkC,UAAlC,C,CAEA;;AACA,eAAeC,QAAf,GAA4C;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,aAAa,CAACK,GAAd,CAAkB,QAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAQD,OAAO,SAASE,QAAT,GAA8B;AAAA;;AACnC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMW,QAAQ,GAAGZ,WAAW,CAAEO,IAAD,IAAUF,iBAAiB,CAACE,IAAD,EAAOG,MAAP,CAA5B,EAA4C,CACtEA,MADsE,CAA5C,CAA5B;AAIA,QAAMG,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEN,IAAAA,IAAI,EAAEO,KAAK,GAAGD;AAAhB,MAA6BX,QAAQ,CAACE,SAAS,CAACU,KAAX,EAAkBR,QAAlB,EAA4B;AACrES,IAAAA,MAAM,EAAEL,MAAM,KAAK,KAAX,GAAmBM,SAAnB,GAA+BJ;AAD8B,GAA5B,CAA3C;AAIA,SAAO;AAAEE,IAAAA,KAAF;AAASJ,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAP;AACD;;GAdeF,Q;UASqBP,Q","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\n\nimport type { Staff } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { filterByTreatment } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getStaff(): Promise<Staff[]> {\n  const { data } = await axiosInstance.get('/staff');\n\n  return data;\n}\n\ninterface UseStaff {\n  staff: Staff[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useStaff(): UseStaff {\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n\n  const selectFn = useCallback((data) => filterByTreatment(data, filter), [\n    filter,\n  ]);\n\n  const fallback = [];\n  const { data: staff = fallback } = useQuery(queryKeys.staff, getStaff, {\n    select: filter === 'all' ? undefined : selectFn,\n  });\n\n  return { staff, filter, setFilter };\n}\n"]},"metadata":{},"sourceType":"module"}