{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear'; // for useQuery call\n\nasync function getAppointments(year, month) {\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n} // types for hook return object\n\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs()); // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n\n  const [monthYear, setMonthYear] = useState(currentMonthYear); // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n\n\n  const [showAll, setShowAll] = useState(false); // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n\n  const {\n    user\n  } = useUser();\n  const selectFn = useCallback(data => getAvailableAppointments(data, user), [user]);\n  /** ****************** END 2: filter appointments  ******************** */\n\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n  // Notes:\n  //    1. appointments is an AppointmentDateMap (object with days of month\n  //       as properties, and arrays of appointments for that day as values)\n  //\n  //    2. The getAppointments query function needs monthYear.year and\n  //       monthYear.month\n\n  const fallback = {};\n  const {\n    data: appointments = fallback\n  } = useQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => getAppointments(monthYear.year, monthYear.month), // bad approach\n  // { keepPreviousData: true },\n  {\n    select: showAll ? undefined : selectFn\n  });\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery([queryKeys.appointments, nextMonthYear.year, nextMonthYear.month], () => getAppointments(nextMonthYear.year, nextMonthYear.month));\n  }, [queryClient, monthYear]);\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n\n_s(useAppointments, \"pPbq+kZnZ7zSO3chsjZjxmMNefk=\", false, function () {\n  return [useUser, useQuery, useQueryClient];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/appointments/hooks/useAppointments.ts"],"names":["dayjs","useCallback","useEffect","useState","useQuery","useQueryClient","axiosInstance","queryKeys","useUser","getAvailableAppointments","getMonthYearDetails","getNewMonthYear","getAppointments","year","month","data","get","useAppointments","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","selectFn","fallback","appointments","select","undefined","queryClient","nextMonthYear","prefetchQuery"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAGEC,WAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,aAAzC;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAgE,aAAhE,C,CAEA;;AACA,eAAeC,eAAf,CACEC,IADF,EAEEC,KAFF,EAG+B;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMT,aAAa,CAACU,GAAd,CAAmB,iBAAgBH,IAAK,IAAGC,KAAM,EAAjD,CAAvB;AACA,SAAOC,IAAP;AACD,C,CAED;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAT,GAA4C;AAAA;;AACjD;AACA;AACA,QAAMC,gBAAgB,GAAGR,mBAAmB,CAACV,KAAK,EAAN,CAA5C,CAHiD,CAKjD;AACA;;AACA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAACe,gBAAD,CAA1C,CAPiD,CASjD;AACA;;AACA,WAASG,eAAT,CAAyBC,cAAzB,EAAuD;AACrDF,IAAAA,YAAY,CAAEG,QAAD,IAAcZ,eAAe,CAACY,QAAD,EAAWD,cAAX,CAA9B,CAAZ;AACD;AACD;;AACA;AACA;;;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,KAAD,CAAtC,CAjBiD,CAmBjD;AACA;AACA;;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAWlB,OAAO,EAAxB;AAEA,QAAMmB,QAAQ,GAAG1B,WAAW,CAAEc,IAAD,IAAUN,wBAAwB,CAACM,IAAD,EAAOW,IAAP,CAAnC,EAAiD,CAC3EA,IAD2E,CAAjD,CAA5B;AAIA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAME,QAAQ,GAAG,EAAjB;AAEA,QAAM;AAAEb,IAAAA,IAAI,EAAEc,YAAY,GAAGD;AAAvB,MAAoCxB,QAAQ,CAChD,CAACG,SAAS,CAACsB,YAAX,EAAyBV,SAAS,CAACN,IAAnC,EAAyCM,SAAS,CAACL,KAAnD,CADgD,EAEhD,MAAMF,eAAe,CAACO,SAAS,CAACN,IAAX,EAAiBM,SAAS,CAACL,KAA3B,CAF2B,EAGhD;AACA;AACA;AAAEgB,IAAAA,MAAM,EAAEN,OAAO,GAAGO,SAAH,GAAeJ;AAAhC,GALgD,CAAlD;AAQA,QAAMK,WAAW,GAAG3B,cAAc,EAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,aAAa,GAAGtB,eAAe,CAACQ,SAAD,EAAY,CAAZ,CAArC;AAEAa,IAAAA,WAAW,CAACE,aAAZ,CACE,CAAC3B,SAAS,CAACsB,YAAX,EAAyBI,aAAa,CAACpB,IAAvC,EAA6CoB,aAAa,CAACnB,KAA3D,CADF,EAEE,MAAMF,eAAe,CAACqB,aAAa,CAACpB,IAAf,EAAqBoB,aAAa,CAACnB,KAAnC,CAFvB;AAID,GAPQ,EAON,CAACkB,WAAD,EAAcb,SAAd,CAPM,CAAT;AAQA;;AAEA,SAAO;AAAEU,IAAAA,YAAF;AAAgBV,IAAAA,SAAhB;AAA2BE,IAAAA,eAA3B;AAA4CG,IAAAA,OAA5C;AAAqDC,IAAAA;AAArD,GAAP;AACD;;GA9DeR,e;UAsBGT,O,EAmByBJ,Q,EAQtBC,c","sourcesContent":["// @ts-nocheck\n\nimport dayjs from 'dayjs';\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { AppointmentDateMap } from '../types';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\n\n// for useQuery call\nasync function getAppointments(\n  year: string,\n  month: string,\n): Promise<AppointmentDateMap> {\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n}\n\n// types for hook return object\ninterface UseAppointments {\n  appointments: AppointmentDateMap;\n  monthYear: MonthYear;\n  updateMonthYear: (monthIncrement: number) => void;\n  showAll: boolean;\n  setShowAll: Dispatch<SetStateAction<boolean>>;\n}\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments(): UseAppointments {\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs());\n\n  // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\n\n  // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n  function updateMonthYear(monthIncrement: number): void {\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n  const [showAll, setShowAll] = useState(false);\n\n  // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n  const { user } = useUser();\n\n  const selectFn = useCallback((data) => getAvailableAppointments(data, user), [\n    user,\n  ]);\n\n  /** ****************** END 2: filter appointments  ******************** */\n\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n\n  // Notes:\n  //    1. appointments is an AppointmentDateMap (object with days of month\n  //       as properties, and arrays of appointments for that day as values)\n  //\n  //    2. The getAppointments query function needs monthYear.year and\n  //       monthYear.month\n  const fallback = {};\n\n  const { data: appointments = fallback } = useQuery(\n    [queryKeys.appointments, monthYear.year, monthYear.month],\n    () => getAppointments(monthYear.year, monthYear.month),\n    // bad approach\n    // { keepPreviousData: true },\n    { select: showAll ? undefined : selectFn },\n  );\n\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n\n    queryClient.prefetchQuery(\n      [queryKeys.appointments, nextMonthYear.year, nextMonthYear.month],\n      () => getAppointments(nextMonthYear.year, nextMonthYear.month),\n    );\n  }, [queryClient, monthYear]);\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\n}\n"]},"metadata":{},"sourceType":"module"}