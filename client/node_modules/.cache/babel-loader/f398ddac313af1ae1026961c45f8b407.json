{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants'; // for when we need a query function for useQuery\n\nasync function fetchTrainings() {\n  const {\n    data\n  } = await axiosInstance.get('/trainings');\n  return data;\n}\n\nexport function Trainings() {\n  _s();\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    error,\n    data\n  } = useQuery(queryKeys.trainings, fetchTrainings);\n  return {\n    isLoading,\n    isFetching\n  };\n}\n\n_s(Trainings, \"xRxEp9YAgiRbgt5CGNSanM5wUsg=\", false, function () {\n  return [useQuery];\n});\n\n_c = Trainings;\n\nvar _c;\n\n$RefreshReg$(_c, \"Trainings\");","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/fitness-center/client/src/components/trainings/hooks/useTrainings.ts"],"names":["useQuery","axiosInstance","queryKeys","fetchTrainings","data","get","Trainings","isLoading","isFetching","isError","error","trainings"],"mappings":";;AAAA,SAASA,QAAT,QAAyC,aAAzC;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B,C,CAEA;;AACA,eAAeC,cAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,YAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,SAAT,GAAqB;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,UAAb;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,KAAlC;AAAyCN,IAAAA;AAAzC,MAAkDJ,QAAQ,CAC9DE,SAAS,CAACS,SADoD,EAE9DR,cAF8D,CAAhE;AAKA,SAAO;AAAEI,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD;;GAPeF,S;UAC0CN,Q;;;KAD1CM,S","sourcesContent":["import { useQuery, useQueryClient } from 'react-query';\n\nimport type { Training } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function fetchTrainings(): Promise<Training[]> {\n  const { data } = await axiosInstance.get('/trainings');\n\n  return data;\n}\n\nexport function Trainings() {\n  const { isLoading, isFetching, isError, error, data } = useQuery(\n    queryKeys.trainings,\n    fetchTrainings,\n  );\n\n  return { isLoading, isFetching };\n}\n"]},"metadata":{},"sourceType":"module"}