{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCustomToast } from 'components/app/hooks/useCustomToast';\nimport jsonpatch from 'fast-json-patch';\nimport { useMutation } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser'; // for when we need a server function\n\nasync function patchUserOnServer(newData, originalData) {\n  if (!newData || !originalData) return null; // create a patch for the difference between newData and originalData\n\n  const patch = jsonpatch.compare(originalData, newData); // send patched data to the server\n\n  const {\n    data\n  } = await axiosInstance.patch(`/user/${originalData.id}`, {\n    patch\n  }, {\n    headers: getJWTHeader(originalData)\n  });\n  return data.user;\n} // TODO: update type to UseMutateFunction type\n\n\nexport function usePatchUser() {\n  _s();\n\n  const {\n    user,\n    updateUser\n  } = useUser();\n  const toast = useCustomToast();\n  const {\n    mutate: patchUser\n  } = useMutation(newUserData => patchUserOnServer(newUserData, user), {\n    // onMutate returns context that is passed to onError\n    onMutate: async newData => {// cancel any outdoing queries for user data, so old server data\n      // doesn't overwrite our optimistic update\n      // snapshot of previuos user value\n      // optimistically update the cache with new user value\n      // retur the context object with snapshotted value\n    },\n    onError: prevUserDataContext => {// roll back cache to saved value\n    },\n    onSuccess: userData => {\n      if (userData) {\n        updateUser(userData);\n        toast({\n          title: 'User updated',\n          status: 'success'\n        });\n      }\n    }\n  });\n  return patchUser;\n}\n\n_s(usePatchUser, \"JrxbyD3aQpnwhUE51FII2zhy7og=\", false, function () {\n  return [useUser, useCustomToast, useMutation];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/user/hooks/usePatchUser.ts"],"names":["useCustomToast","jsonpatch","useMutation","axiosInstance","getJWTHeader","useUser","patchUserOnServer","newData","originalData","patch","compare","data","id","headers","user","usePatchUser","updateUser","toast","mutate","patchUser","newUserData","onMutate","onError","prevUserDataContext","onSuccess","userData","title","status"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,qCAA/B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAA4BC,WAA5B,QAA+C,aAA/C;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,eAAeC,iBAAf,CACEC,OADF,EAEEC,YAFF,EAGwB;AACtB,MAAI,CAACD,OAAD,IAAY,CAACC,YAAjB,EAA+B,OAAO,IAAP,CADT,CAEtB;;AACA,QAAMC,KAAK,GAAGR,SAAS,CAACS,OAAV,CAAkBF,YAAlB,EAAgCD,OAAhC,CAAd,CAHsB,CAKtB;;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACM,KAAd,CACpB,SAAQD,YAAY,CAACI,EAAG,EADJ,EAErB;AAAEH,IAAAA;AAAF,GAFqB,EAGrB;AACEI,IAAAA,OAAO,EAAET,YAAY,CAACI,YAAD;AADvB,GAHqB,CAAvB;AAOA,SAAOG,IAAI,CAACG,IAAZ;AACD,C,CAED;;;AACA,OAAO,SAASC,YAAT,GAKL;AAAA;;AACA,QAAM;AAAED,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAuBX,OAAO,EAApC;AACA,QAAMY,KAAK,GAAGjB,cAAc,EAA5B;AAEA,QAAM;AAAEkB,IAAAA,MAAM,EAAEC;AAAV,MAAwBjB,WAAW,CACtCkB,WAAD,IAAuBd,iBAAiB,CAACc,WAAD,EAAcN,IAAd,CADD,EAEvC;AACE;AACAO,IAAAA,QAAQ,EAAE,MAAOd,OAAP,IAAgC,CACxC;AACA;AACA;AACA;AACA;AACD,KARH;AASEe,IAAAA,OAAO,EAAGC,mBAAD,IAAyB,CAChC;AACD,KAXH;AAYEC,IAAAA,SAAS,EAAGC,QAAD,IAA2B;AACpC,UAAIA,QAAJ,EAAc;AACZT,QAAAA,UAAU,CAACS,QAAD,CAAV;AACAR,QAAAA,KAAK,CAAC;AAAES,UAAAA,KAAK,EAAE,cAAT;AAAyBC,UAAAA,MAAM,EAAE;AAAjC,SAAD,CAAL;AACD;AACF;AAjBH,GAFuC,CAAzC;AAuBA,SAAOR,SAAP;AACD;;GAjCeJ,Y;UAMeV,O,EACfL,c,EAEgBE,W","sourcesContent":["import { useCustomToast } from 'components/app/hooks/useCustomToast';\nimport jsonpatch from 'fast-json-patch';\nimport { UseMutateFunction, useMutation } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { useUser } from './useUser';\n\n// for when we need a server function\nasync function patchUserOnServer(\n  newData: User | null,\n  originalData: User | null,\n): Promise<User | null> {\n  if (!newData || !originalData) return null;\n  // create a patch for the difference between newData and originalData\n  const patch = jsonpatch.compare(originalData, newData);\n\n  // send patched data to the server\n  const { data } = await axiosInstance.patch(\n    `/user/${originalData.id}`,\n    { patch },\n    {\n      headers: getJWTHeader(originalData),\n    },\n  );\n  return data.user;\n}\n\n// TODO: update type to UseMutateFunction type\nexport function usePatchUser(): UseMutateFunction<\n  User,\n  unknown,\n  User,\n  unknown\n> {\n  const { user, updateUser } = useUser();\n  const toast = useCustomToast();\n\n  const { mutate: patchUser } = useMutation(\n    (newUserData: User) => patchUserOnServer(newUserData, user),\n    {\n      // onMutate returns context that is passed to onError\n      onMutate: async (newData: User | null) => {\n        // cancel any outdoing queries for user data, so old server data\n        // doesn't overwrite our optimistic update\n        // snapshot of previuos user value\n        // optimistically update the cache with new user value\n        // retur the context object with snapshotted value\n      },\n      onError: (prevUserDataContext) => {\n        // roll back cache to saved value\n      },\n      onSuccess: (userData: User | null) => {\n        if (userData) {\n          updateUser(userData);\n          toast({ title: 'User updated', status: 'success' });\n        }\n      },\n    },\n  );\n\n  return patchUser;\n}\n"]},"metadata":{},"sourceType":"module"}