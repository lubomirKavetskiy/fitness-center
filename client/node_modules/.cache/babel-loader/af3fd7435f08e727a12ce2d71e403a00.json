{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { filterByTraining } from '../utils'; // for when we need a query function for useQuery\n\nasync function getCoaches() {\n  const {\n    data\n  } = await axiosInstance.get('/coaches');\n  return data;\n}\n\nexport function useCoaches() {\n  _s();\n\n  // for filtering coaches by training\n  const [filter, setFilter] = useState('all');\n  const selectFn = useCallback(unfilteredCoaches => filterByTraining(unfilteredCoaches, filter), [filter]);\n  const fallback = [];\n  const {\n    data: coaches = []\n  } = useQuery('coaches', getCoaches, {\n    select: filter === 'all' ? undefined : selectFn\n  });\n  return {\n    coaches,\n    filter,\n    setFilter\n  };\n}\n\n_s(useCoaches, \"cabMoL2vSGxEmdLkIxHap0gT0kI=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/fitness-center/client/src/components/coaches/hooks/useCoaches.ts"],"names":["useCallback","useState","useQuery","axiosInstance","filterByTraining","getCoaches","data","get","useCoaches","filter","setFilter","selectFn","unfilteredCoaches","fallback","coaches","select","undefined"],"mappings":";;AAAA,SAAmCA,WAAnC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,SAASC,gBAAT,QAAiC,UAAjC,C,CAEA;;AACA,eAAeC,UAAf,GAAgD;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,UAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAQD,OAAO,SAASE,UAAT,GAAkC;AAAA;;AACvC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMU,QAAQ,GAAGX,WAAW,CACzBY,iBAAD,IAAuBR,gBAAgB,CAACQ,iBAAD,EAAoBH,MAApB,CADb,EAE1B,CAACA,MAAD,CAF0B,CAA5B;AAKA,QAAMI,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEP,IAAAA,IAAI,EAAEQ,OAAO,GAAG;AAAlB,MAAyBZ,QAAQ,CAAC,SAAD,EAAYG,UAAZ,EAAwB;AAC7DU,IAAAA,MAAM,EAAEN,MAAM,KAAK,KAAX,GAAmBO,SAAnB,GAA+BL;AADsB,GAAxB,CAAvC;AAIA,SAAO;AAAEG,IAAAA,OAAF;AAAWL,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,GAAP;AACD;;GAfeF,U;UAUiBN,Q","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\n\nimport type { Coaches } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { filterByTraining } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getCoaches(): Promise<Coaches[]> {\n  const { data } = await axiosInstance.get('/coaches');\n\n  return data;\n}\n\ninterface UseCoaches {\n  coaches: Coaches[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useCoaches(): UseCoaches {\n  // for filtering coaches by training\n  const [filter, setFilter] = useState('all');\n\n  const selectFn = useCallback(\n    (unfilteredCoaches) => filterByTraining(unfilteredCoaches, filter),\n    [filter],\n  );\n\n  const fallback = [];\n  const { data: coaches = [] } = useQuery('coaches', getCoaches, {\n    select: filter === 'all' ? undefined : selectFn,\n  });\n\n  return { coaches, filter, setFilter };\n}\n"]},"metadata":{},"sourceType":"module"}