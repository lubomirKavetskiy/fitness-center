{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser'; // for when we need a query function for useQuery\n\nasync function getUserAppointments(user) {\n  if (!user) return null;\n  console.log('get user Appointments axios');\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user)\n  });\n  return data.appointments;\n}\n\nexport function useUserAppointments() {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const fallback = [];\n  const {\n    data: userAppointmets = fallback\n  } = useQuery([queryKeys.appointments, queryKeys.user, user === null || user === void 0 ? void 0 : user.id], () => getUserAppointments(user), {\n    enabled: !!user\n  });\n  return userAppointmets;\n}\n\n_s(useUserAppointments, \"iO2wJyTYZyK4M8ldoKxj7/F1ZNg=\", false, function () {\n  return [useUser, useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/fitness-center/client/src/components/user/hooks/useUserAppointments.ts"],"names":["useQuery","axiosInstance","getJWTHeader","queryKeys","useUser","getUserAppointments","user","console","log","data","get","id","headers","appointments","useUserAppointments","fallback","userAppointmets","enabled"],"mappings":";;AACA,SAASA,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,wBAA5C;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAEA;;AACA,eAAeC,mBAAf,CACEC,IADF,EAEiC;AAC/B,MAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,aAAa,CAACS,GAAd,CAAmB,SAAQJ,IAAI,CAACK,EAAG,eAAnC,EAAmD;AACxEC,IAAAA,OAAO,EAAEV,YAAY,CAACI,IAAD;AADmD,GAAnD,CAAvB;AAGA,SAAOG,IAAI,CAACI,YAAZ;AACD;;AAED,OAAO,SAASC,mBAAT,GAA8C;AAAA;;AACnD,QAAM;AAAER,IAAAA;AAAF,MAAWF,OAAO,EAAxB;AAEA,QAAMW,QAAuB,GAAG,EAAhC;AAEA,QAAM;AAAEN,IAAAA,IAAI,EAAEO,eAAe,GAAGD;AAA1B,MAAuCf,QAAQ,CACnD,CAACG,SAAS,CAACU,YAAX,EAAyBV,SAAS,CAACG,IAAnC,EAAyCA,IAAzC,aAAyCA,IAAzC,uBAAyCA,IAAI,CAAEK,EAA/C,CADmD,EAEnD,MAAMN,mBAAmB,CAACC,IAAD,CAF0B,EAGnD;AAAEW,IAAAA,OAAO,EAAE,CAAC,CAACX;AAAb,GAHmD,CAArD;AAMA,SAAOU,eAAP;AACD;;GAZeF,mB;UACGV,O,EAI4BJ,Q","sourcesContent":["import dayjs from 'dayjs';\nimport { useQuery } from 'react-query';\n\nimport type { Appointment, User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(\n  user: User | null,\n): Promise<Appointment[] | null> {\n  if (!user) return null;\n  console.log('get user Appointments axios');\n  const { data } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user),\n  });\n  return data.appointments;\n}\n\nexport function useUserAppointments(): Appointment[] {\n  const { user } = useUser();\n\n  const fallback: Appointment[] = [];\n\n  const { data: userAppointmets = fallback } = useQuery(\n    [queryKeys.appointments, queryKeys.user, user?.id],\n    () => getUserAppointments(user),\n    { enabled: !!user },\n  );\n\n  return userAppointmets;\n}\n"]},"metadata":{},"sourceType":"module"}