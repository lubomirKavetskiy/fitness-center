{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getStaff() {\n  const {\n    data\n  } = await axiosInstance.get('/staff');\n  return data;\n}\n\nexport function useStaff() {\n  _s();\n\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n  console.log({\n    filter\n  });\n  const selectFn = useCallback(data => data === null || data === void 0 ? void 0 : data.filter(({\n    treatmentNames\n  }) => treatmentNames === null || treatmentNames === void 0 ? void 0 : treatmentNames.includes(filter.toLocaleLowerCase())), [filter]);\n  const fallback = [];\n  const {\n    data: staff = fallback\n  } = useQuery(queryKeys.staff, getStaff, {\n    select: filter === 'all' ? undefined : selectFn\n  });\n  return {\n    staff,\n    filter,\n    setFilter\n  };\n}\n\n_s(useStaff, \"H5iJbTq0KjuiK8q6TAQVwM4BZcE=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/staff/hooks/useStaff.ts"],"names":["useCallback","useState","useQuery","axiosInstance","queryKeys","getStaff","data","get","useStaff","filter","setFilter","console","log","selectFn","treatmentNames","includes","toLocaleLowerCase","fallback","staff","select","undefined"],"mappings":";;AAAA,SAAmCA,WAAnC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAGA;AACA,eAAeC,QAAf,GAA4C;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,QAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAQD,OAAO,SAASE,QAAT,GAA8B;AAAA;;AACnC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,IAAAA;AAAF,GAAZ;AACA,QAAMI,QAAQ,GAAGb,WAAW,CACzBM,IAAD,IACEA,IADF,aACEA,IADF,uBACEA,IAAI,CAAEG,MAAN,CAAa,CAAC;AAAEK,IAAAA;AAAF,GAAD,KACXA,cADW,aACXA,cADW,uBACXA,cAAc,CAAEC,QAAhB,CAAyBN,MAAM,CAACO,iBAAP,EAAzB,CADF,CAFwB,EAK1B,CAACP,MAAD,CAL0B,CAA5B;AAQA,QAAMQ,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEX,IAAAA,IAAI,EAAEY,KAAK,GAAGD;AAAhB,MAA6Bf,QAAQ,CAACE,SAAS,CAACc,KAAX,EAAkBb,QAAlB,EAA4B;AACrEc,IAAAA,MAAM,EAAEV,MAAM,KAAK,KAAX,GAAmBW,SAAnB,GAA+BP;AAD8B,GAA5B,CAA3C;AAIA,SAAO;AAAEK,IAAAA,KAAF;AAAST,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAP;AACD;;GAlBeF,Q;UAaqBN,Q","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react';\nimport { useQuery } from 'react-query';\n\nimport type { Staff } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { filterByTreatment } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getStaff(): Promise<Staff[]> {\n  const { data } = await axiosInstance.get('/staff');\n\n  return data;\n}\n\ninterface UseStaff {\n  staff: Staff[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useStaff(): UseStaff {\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n  console.log({ filter });\n  const selectFn = useCallback(\n    (data) =>\n      data?.filter(({ treatmentNames }) =>\n        treatmentNames?.includes(filter.toLocaleLowerCase()),\n      ),\n    [filter],\n  );\n\n  const fallback = [];\n  const { data: staff = fallback } = useQuery(queryKeys.staff, getStaff, {\n    select: filter === 'all' ? undefined : selectFn,\n  });\n\n  return { staff, filter, setFilter };\n}\n"]},"metadata":{},"sourceType":"module"}