{"ast":null,"code":"var _jsxFileName = \"/Users/work/Documents/Projects/study/fitness-center/client/src/components/appointments/Appointment.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, HStack, Text, Tooltip } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { useMemo } from 'react';\nimport { useUser } from '../user/hooks/useUser';\nimport { useCancelAppointment } from './hooks/useCancelAppointment';\nimport { useReserveAppointment } from './hooks/useReserveAppointment';\nimport { appointmentInPast, getAppointmentColor } from './utils'; // determine whether this appointment can be reserved / un-reserved by logged-in user\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction isClickable(user, appointmentData) {\n  return !!((user === null || user === void 0 ? void 0 : user.id) && (!appointmentData.userId || appointmentData.userId === (user === null || user === void 0 ? void 0 : user.id)) && !appointmentInPast(appointmentData));\n}\n\nexport function Appointment({\n  appointmentData\n}) {\n  _s();\n\n  const {\n    user\n  } = useUser();\n  const reserveAppointment = useReserveAppointment();\n  const cancelAppointment = useCancelAppointment();\n  const [textColor, bgColor, cursor] = getAppointmentColor(appointmentData, user === null || user === void 0 ? void 0 : user.id);\n  const clickable = isClickable(user, appointmentData);\n  let onAppointmentClick;\n  let hoverCss = {}; // turn the lozenge into a button if it's clickable\n\n  if (clickable) {\n    onAppointmentClick = user ? () => appointmentData.userId === (user === null || user === void 0 ? void 0 : user.id) ? cancelAppointment(appointmentData) : reserveAppointment(appointmentData) : undefined;\n    hoverCss = {\n      transform: 'translateY(-1px)',\n      boxShadow: 'md',\n      cursor: 'pointer'\n    };\n  }\n\n  const appointmentHour = dayjs(appointmentData.dateTime).format('h a');\n  const label = useMemo(() => {\n    if (clickable) {\n      return appointmentData.userId === (user === null || user === void 0 ? void 0 : user.id) ? 'your appointment' : 'available';\n    }\n\n    return 'unavailable';\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    label: label,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      borderRadius: \"lg\",\n      px: 2,\n      bgColor: bgColor,\n      color: textColor,\n      as: clickable ? 'button' : 'div',\n      onClick: onAppointmentClick,\n      _hover: hoverCss,\n      cursor: cursor,\n      children: /*#__PURE__*/_jsxDEV(HStack, {\n        justify: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          fontSize: \"xs\",\n          children: appointmentHour\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"span\",\n          fontSize: \"xs\",\n          children: appointmentData.trainingName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Appointment, \"d9eEEKM72w5TYoOD1Xe6Aa8Y10U=\", false, function () {\n  return [useUser, useReserveAppointment, useCancelAppointment];\n});\n\n_c = Appointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Appointment\");","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/fitness-center/client/src/components/appointments/Appointment.tsx"],"names":["Box","HStack","Text","Tooltip","dayjs","useMemo","useUser","useCancelAppointment","useReserveAppointment","appointmentInPast","getAppointmentColor","isClickable","user","appointmentData","id","userId","Appointment","reserveAppointment","cancelAppointment","textColor","bgColor","cursor","clickable","onAppointmentClick","hoverCss","undefined","transform","boxShadow","appointmentHour","dateTime","format","label","trainingName"],"mappings":"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","sourcesContent":["import { Box, HStack, Text, Tooltip } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nimport { ReactElement, useMemo } from 'react';\n\nimport { Appointment as AppointmentType, User } from '../../../../shared/types';\nimport { useUser } from '../user/hooks/useUser';\nimport { useCancelAppointment } from './hooks/useCancelAppointment';\nimport { useReserveAppointment } from './hooks/useReserveAppointment';\nimport { appointmentInPast, getAppointmentColor } from './utils';\n\n// determine whether this appointment can be reserved / un-reserved by logged-in user\nfunction isClickable(\n  user: User | null,\n  appointmentData: AppointmentType,\n): boolean {\n  return !!(\n    user?.id &&\n    (!appointmentData.userId || appointmentData.userId === user?.id) &&\n    !appointmentInPast(appointmentData)\n  );\n}\n\ninterface AppointmentProps {\n  appointmentData: AppointmentType;\n}\n\nexport function Appointment({\n  appointmentData,\n}: AppointmentProps): ReactElement {\n  const { user } = useUser();\n\n  const reserveAppointment = useReserveAppointment();\n  const cancelAppointment = useCancelAppointment();\n  const [textColor, bgColor, cursor] = getAppointmentColor(\n    appointmentData,\n    user?.id,\n  );\n\n  const clickable = isClickable(user, appointmentData);\n  let onAppointmentClick: undefined | (() => void);\n  let hoverCss = {};\n\n  // turn the lozenge into a button if it's clickable\n  if (clickable) {\n    onAppointmentClick = user\n      ? () =>\n          appointmentData.userId === user?.id\n            ? cancelAppointment(appointmentData)\n            : reserveAppointment(appointmentData)\n      : undefined;\n    hoverCss = {\n      transform: 'translateY(-1px)',\n      boxShadow: 'md',\n      cursor: 'pointer',\n    };\n  }\n\n  const appointmentHour = dayjs(appointmentData.dateTime).format('h a');\n\n  const label = useMemo(() => {\n    if (clickable) {\n      return appointmentData.userId === user?.id\n        ? 'your appointment'\n        : 'available';\n    }\n    return 'unavailable';\n  }, []);\n\n  return (\n    <Tooltip label={label}>\n      <Box\n        borderRadius=\"lg\"\n        px={2}\n        bgColor={bgColor}\n        color={textColor}\n        as={clickable ? 'button' : 'div'}\n        onClick={onAppointmentClick}\n        _hover={hoverCss}\n        cursor={cursor}\n      >\n        <HStack justify=\"space-between\">\n          <Text as=\"span\" fontSize=\"xs\">\n            {appointmentHour}\n          </Text>\n          <Text as=\"span\" fontSize=\"xs\">\n            {appointmentData.trainingName}\n          </Text>\n        </HStack>\n      </Box>\n    </Tooltip>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}