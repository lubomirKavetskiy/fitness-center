{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { toast } from '@chakra-ui/react';\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments() {\n  _s();\n\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: error => {\n      const title = error instanceof Error ? error === null || error === void 0 ? void 0 : error.message : 'error connecting to the server';\n      toast({\n        title,\n        status: 'error'\n      });\n    }\n  });\n  return data;\n}\n\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/react-query/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"names":["toast","useQuery","axiosInstance","queryKeys","getTreatments","data","get","useTreatments","fallback","treatments","onError","error","title","Error","message","status"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAGA;AACA,eAAeC,aAAf,GAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMH,aAAa,CAACI,GAAd,CAAkB,aAAlB,CAAvB;AAEA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASE,aAAT,GAAsC;AAAA;;AAC3C,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEH,IAAAA,IAAI,GAAGG;AAAT,MAAsBP,QAAQ,CAACE,SAAS,CAACM,UAAX,EAAuBL,aAAvB,EAAsC;AACxEM,IAAAA,OAAO,EAAGC,KAAD,IAAW;AAClB,YAAMC,KAAK,GACTD,KAAK,YAAYE,KAAjB,GACIF,KADJ,aACIA,KADJ,uBACIA,KAAK,CAAEG,OADX,GAEI,gCAHN;AAKAd,MAAAA,KAAK,CAAC;AAAEY,QAAAA,KAAF;AAASG,QAAAA,MAAM,EAAE;AAAjB,OAAD,CAAL;AACD;AARuE,GAAtC,CAApC;AAWA,SAAOV,IAAP;AACD;;GAdeE,a;UAEcN,Q","sourcesContent":["import { toast } from '@chakra-ui/react';\nimport { useQuery } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const fallback = [];\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: (error) => {\n      const title =\n        error instanceof Error\n          ? error?.message\n          : 'error connecting to the server';\n\n      toast({ title, status: 'error' });\n    },\n  });\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}