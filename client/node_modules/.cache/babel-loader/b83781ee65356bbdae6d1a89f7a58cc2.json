{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\nimport dayjs from 'dayjs';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear } from './monthYear';\nconst commonOptions = {\n  staleTime: 0,\n  cacheTime: 300000 // default RQ 5 min\n\n}; // for useQuery call\n\nasync function getAppointments(year, month) {\n  console.log('getAppointm axios');\n  const {\n    data\n  } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n} // types for hook return object\n\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments() {\n  _s();\n\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs()); // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n\n  const [monthYear, setMonthYear] = useState(currentMonthYear); // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n\n  function updateMonthYear(monthIncrement) {\n    setMonthYear(prevData => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n\n\n  const [showAll, setShowAll] = useState(false); // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n\n  const {\n    user\n  } = useUser();\n  const selectFn = useCallback(data => getAvailableAppointments(data, user), [user]);\n  /** ****************** END 2: filter appointments  ******************** */\n\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n\n  const queryClient = useQueryClient();\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n    queryClient.prefetchQuery([queryKeys.appointments, nextMonthYear.year, nextMonthYear.month], () => getAppointments(nextMonthYear.year, nextMonthYear.month, commonOptions));\n  }, [queryClient, monthYear]);\n  const fallback = {};\n  const {\n    data: appointments = fallback\n  } = useQuery([queryKeys.appointments, monthYear.year, monthYear.month], () => getAppointments(monthYear.year, monthYear.month), // bad approach\n  // { keepPreviousData: true },\n  {\n    select: showAll ? undefined : selectFn,\n    ...commonOptions,\n    refetchOnMount: true,\n    refetchOnReconnect: true,\n    refetchOnWindowFocus: false,\n    refetchInterval: 60000 // every 1 min\n\n  });\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return {\n    appointments,\n    monthYear,\n    updateMonthYear,\n    showAll,\n    setShowAll\n  };\n}\n\n_s(useAppointments, \"hxmAu3AY4pN9y6IRQ7SYW7i1ghk=\", false, function () {\n  return [useUser, useQueryClient, useQuery];\n});","map":{"version":3,"sources":["/Users/work/Documents/Projects/study/fitness-center/client/src/components/appointments/hooks/useAppointments.ts"],"names":["dayjs","useCallback","useEffect","useState","useQuery","useQueryClient","axiosInstance","queryKeys","useUser","getAvailableAppointments","getMonthYearDetails","getNewMonthYear","commonOptions","staleTime","cacheTime","getAppointments","year","month","console","log","data","get","useAppointments","currentMonthYear","monthYear","setMonthYear","updateMonthYear","monthIncrement","prevData","showAll","setShowAll","user","selectFn","queryClient","nextMonthYear","prefetchQuery","appointments","fallback","select","undefined","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","refetchInterval"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\nimport dayjs from 'dayjs';\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { useQuery, useQueryClient } from 'react-query';\n\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from '../../user/hooks/useUser';\nimport { AppointmentDateMap } from '../types';\nimport { getAvailableAppointments } from '../utils';\nimport { getMonthYearDetails, getNewMonthYear, MonthYear } from './monthYear';\n\nconst commonOptions = {\n  staleTime: 0,\n  cacheTime: 300000, // default RQ 5 min\n};\n\n// for useQuery call\nasync function getAppointments(\n  year: string,\n  month: string,\n): Promise<AppointmentDateMap> {\n  console.log('getAppointm axios');\n  const { data } = await axiosInstance.get(`/appointments/${year}/${month}`);\n  return data;\n}\n\n// types for hook return object\ninterface UseAppointments {\n  appointments: AppointmentDateMap;\n  monthYear: MonthYear;\n  updateMonthYear: (monthIncrement: number) => void;\n  showAll: boolean;\n  setShowAll: Dispatch<SetStateAction<boolean>>;\n}\n\n// The purpose of this hook:\n//   1. track the current month/year (aka monthYear) selected by the user\n//     1a. provide a way to update state\n//   2. return the appointments for that particular monthYear\n//     2a. return in AppointmentDateMap format (appointment arrays indexed by day of month)\n//     2b. prefetch the appointments for adjacent monthYears\n//   3. track the state of the filter (all appointments / available appointments)\n//     3a. return the only the applicable appointments for the current monthYear\nexport function useAppointments(): UseAppointments {\n  /** ****************** START 1: monthYear state *********************** */\n  // get the monthYear for the current date (for default monthYear state)\n  const currentMonthYear = getMonthYearDetails(dayjs());\n\n  // state to track current monthYear chosen by user\n  // state value is returned in hook return object\n  const [monthYear, setMonthYear] = useState(currentMonthYear);\n\n  // setter to update monthYear obj in state when user changes month in view,\n  // returned in hook return object\n  function updateMonthYear(monthIncrement: number): void {\n    setMonthYear((prevData) => getNewMonthYear(prevData, monthIncrement));\n  }\n  /** ****************** END 1: monthYear state ************************* */\n  /** ****************** START 2: filter appointments  ****************** */\n  // State and functions for filtering appointments to show all or only available\n  const [showAll, setShowAll] = useState(false);\n\n  // We will need imported function getAvailableAppointments here\n  // We need the user to pass to getAvailableAppointments so we can show\n  //   appointments that the logged-in user has reserved (in white)\n  const { user } = useUser();\n\n  const selectFn = useCallback((data) => getAvailableAppointments(data, user), [\n    user,\n  ]);\n\n  /** ****************** END 2: filter appointments  ******************** */\n\n  /** ****************** START 3: useQuery  ***************************** */\n  // useQuery call for appointments for the current monthYear\n\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const nextMonthYear = getNewMonthYear(monthYear, 1);\n\n    queryClient.prefetchQuery(\n      [queryKeys.appointments, nextMonthYear.year, nextMonthYear.month],\n      () =>\n        getAppointments(nextMonthYear.year, nextMonthYear.month, commonOptions),\n    );\n  }, [queryClient, monthYear]);\n\n  const fallback = {};\n\n  const { data: appointments = fallback } = useQuery(\n    [queryKeys.appointments, monthYear.year, monthYear.month],\n    () => getAppointments(monthYear.year, monthYear.month),\n    // bad approach\n    // { keepPreviousData: true },\n    {\n      select: showAll ? undefined : selectFn,\n      ...commonOptions,\n      refetchOnMount: true,\n      refetchOnReconnect: true,\n      refetchOnWindowFocus: false,\n      refetchInterval: 60000, // every 1 min\n    },\n  );\n\n  /** ****************** END 3: useQuery  ******************************* */\n\n  return { appointments, monthYear, updateMonthYear, showAll, setShowAll };\n}\n"]},"metadata":{},"sourceType":"module"}